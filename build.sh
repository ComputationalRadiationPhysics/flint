#!/bin/bash

# Copyright 2009 Lucas Clemente
#
# This file is part of FLINT.
#
# FLINT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FLINT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FLINT.
# If not, see <http://www.gnu.org/licenses/>.
#

#
# This script prepares FLInT for use and even compiles the whole stuff ;-)
#

INSTDIR=`pwd`

echo_u() {
  echo -e "\033[34;01m>> $1\033[m"
}

echo_s() {
  echo -e "\033[32;01m>> $1\033[m"
  echo
}

echo_e() {
  echo -e "\033[31;01m!! $1\033[m"
}

echo_w() {
  echo -e "\033[33;01m>> $1\033[m"
  echo
}

read_user() {
  echo_u "$1 [$2]"
  read read_user_result
  if [ -z $read_user_result ]; then
    read_user_result=$2
  fi
}

exit_error() {
  echo_e "$1"
  exit 1
}

eval_verbose() {
  if [ $opt_verbose ]; then
    eval "$1"
    return $?
  else
    eval "$1" > /dev/null 2> /dev/null
    return $?
  fi
}

echo_s "This script prepares FLInT for use."

unset opt_compile
unset opt_verbose
unset opt_new
unset opt_defaults
i=0

while [ 1 == 1 ]; do
  i=$((i + 1))
  cmd="echo \$$i"
  opt=`eval $cmd`
  if [ -z $opt ]; then
    break
  fi
  if [ "$opt" == "--compile" ]; then
    opt_compile=1
    continue
  fi
  if [ "$opt" == "--verbose" ]; then
    opt_verbose=1
    continue
  fi
  if [ "$opt" == "--new" ]; then
    opt_new=1
    continue
  fi
  echo_e "Wrong option: $opt"
  exit_error "Usage: ./$0 [--compile] [--verbose] [--new]"
done

echo_u "Setting variables for makefile..."

if [ ! -e "$INSTDIR/config/makefile_config_gpt" -o ! -e "$INSTDIR/config/config.txt" -o ! -e "$INSTDIR/config/gptdir" -o -n "$opt_new" ]; then
  echo
  read_user "Please enter the directory where gpt is installed:" "$HOME/gpt"
  GPT_DIR=$read_user_result
  rm -f config/gptdir
  echo "$GPT_DIR" > config/gptdir
  echo "# config.txt" > config/config.txt
  echo "# Autogenerated by $0" >> config/config.txt
  echo "# `date`" >> config/config.txt
  echo >> config/config.txt
  
  echo "# makefile_config_gpt" > config/makefile_config_gpt
  echo "# Autogenerated by $0" >> config/makefile_config_gpt
  echo "# `date`" >> config/makefile_config_gpt
  echo >> config/makefile_config_gpt
  
  
  echo "# mainG4.hh" >> config/makefile_config_gpt
  echo "CFLAGS += -I$INSTDIR/source/include" >> config/makefile_config_gpt
  echo "LDFLAGS += -L$INSTDIR/lib" >> config/makefile_config_gpt
  echo "LDFLAGS += -lflint" >> config/makefile_config_gpt
  echo >> config/makefile_config_gpt
  
  
  read_user "Please enter the directory where CLHEP is installed:" "$CLHEP_BASE_DIR"
  echo "# CLHEP" >> config/config.txt
  echo "INCLUDE_DIRECTORIES($read_user_result/include)" >> config/config.txt
  echo "LINK_DIRECTORIES($read_user_result/lib)" >> config/config.txt
  echo >> config/config.txt
  
  echo "# CLHEP" >> config/makefile_config_gpt
  echo "LDFLAGS += -L$read_user_result/lib" >> config/makefile_config_gpt
  echo "LDFLAGS += -lCLHEP" >> config/makefile_config_gpt
  echo >> config/makefile_config_gpt
  
  read_user "Please enter the directory where Geant4 is installed:" "$G4INSTALL"
  echo "# Geant4" >> config/config.txt
  echo "INCLUDE_DIRECTORIES($read_user_result/include)" >> config/config.txt
  echo >> config/config.txt
  
  echo "# Geant4" >> config/makefile_config_gpt
  echo "LDFLAGS += -L$INSTDIR/lib" >> config/makefile_config_gpt
  echo "LDFLAGS += -lGeant4" >> config/makefile_config_gpt
  echo >> config/makefile_config_gpt
  
  read_user "Please enter the directory where xerces-c is installed:" "$HOME/software/xerces-c-src_2_8_0/install"
  echo "# xerces-c" >> config/config.txt
  echo "INCLUDE_DIRECTORIES($read_user_result/include)" >> config/config.txt
  echo "LINK_DIRECTORIES($read_user_result/lib)" >> config/config.txt
  echo >> config/config.txt
  
  echo "# xerces-c" >> config/makefile_config_gpt
  echo "LDFLAGS += -L$read_user_result/lib" >> config/makefile_config_gpt
  echo "LDFLAGS += -lxerces-c" >> config/makefile_config_gpt
  echo >> config/makefile_config_gpt
  
  echo_s "Done."
else
  GPT_DIR=`cat config/gptdir`
  echo_w "Not neccesary..."
fi

echo_u "Building libGeant4.a..."
if [ ! -e "$INSTDIR/lib/libGeant4.a" -o -n "$opt_new" ]; then
  cd "$G4INSTALL/tmp/$G4SYSTEM/"
  find . -name *.o |xargs ar rcs $INSTDIR/lib/libGeant4.a
  echo_s "Done."
else
  echo_w "Not neccesary..."
fi

echo_u "Preparing gpt-dir..."
cd "$GPT_DIR/elems"
rm -f G4Virtual.c G4Virtual.h G4Area.c makefile makefile_config_gpt libG4GPTcomm.a
ln -s "$INSTDIR/source/gpt/G4Virtual.c"
ln -s "$INSTDIR/source/gpt/G4Virtual.h"
ln -s "$INSTDIR/makefile_gpt_elems" makefile
ln -s "$INSTDIR/config/makefile_config_gpt" makefile_config_gpt
if [ ! -e "$INSTDIR/config/gpt_elemlist" -o -n "$opt_new" ]; then
  cat "$GPT_DIR/elems/elemlist" |grep -v G4 > "$INSTDIR/config/gpt_elemlist_tmp"
  rm "$GPT_DIR/elems/elemlist"
  echo "G4Virtual G4Virtual" >> "$INSTDIR/config/gpt_elemlist_tmp"
  mv "$INSTDIR/config/gpt_elemlist_tmp" "$INSTDIR/config/gpt_elemlist"
  ln -s "$INSTDIR/config/gpt_elemlist" "$GPT_DIR/elems/elemlist"
fi
echo_s "Done."



if [ -n "$opt_compile" ]; then
  cd "$INSTDIR"
  echo_u "Compiling FLInT..."
  if [ -n "$opt_new" ]; then
    eval_verbose "make clean"
  fi
  if [ -n "$opt_new" -o ! -e CMakeFiles ]; then
    eval_verbose "cmake . && make" || exit_error "Could not compile FLInT"
  else
    eval_verbose "make" || exit_error "Could not compile FLInT"
  fi
  echo_s "Done."
  cd "$GPT_DIR/elems"
  echo_u "Compiling gpt custom elements..."
  rm gpt
  if [ -n "$opt_new" ]; then
    eval_verbose "make clean"
  fi
  eval_verbose "make" || exit_error "Could not compile gpt custom elements"
  eval_verbose "make" || exit_error "Could not compile gpt custom elements"
  echo_s "Done."
  echo_s "FLInT installation complete!"
  rm -f "$INSTDIR/bin/flint"
  ln -s "$GPT_DIR/bin/gpt" "$INSTDIR/bin/flint"
else
  echo_s "Ready to build... Try './build.sh -compile'"
fi

exit 0
